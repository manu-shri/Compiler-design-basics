#include <iostream>
#include <stack>
#include <sstream>
#include <string>
#include <cctype>
#include <stdexcept>

class PostfixCalculator {
public:
    double evaluate(const std::string& expr) {
        std::stack<double> stack;
        std::stringstream ss(expr);
        std::string token;

        while (ss >> token) {
            if (isNumber(token)) {
                stack.push(std::stod(token)); // Push number onto the stack
            } else if (isOperator(token)) {
                if (stack.size() < 2) {
                    throw std::runtime_error("Insufficient values in expression");
                }

                double b = stack.top(); stack.pop(); // Pop operand b
                double a = stack.top(); stack.pop(); // Pop operand a

                double result = applyOperator(a, b, token);
                stack.push(result); // Push result back onto stack
            } else {
                throw std::runtime_error("Invalid token encountered: " + token);
            }
        }

        if (stack.size() != 1) {
            throw std::runtime_error("The expression is invalid or incomplete");
        }

        return stack.top();
    }

private:
    bool isNumber(const std::string& token) {
        // Check if the token is a number (integer or decimal)
        for (char c : token) {
            if (!std::isdigit(c) && c != '.') {
                return false;
            }
        }
        return true;
    }

    bool isOperator(const std::string& token) {
        // Check if the token is one of the arithmetic operators
        return (token == "+" || token == "-" || token == "*" || token == "/");
    }

    double applyOperator(double a, double b, const std::string& op) {
        if (op == "+") return a + b;
        if (op == "-") return a - b;
        if (op == "*") return a * b;
        if (op == "/") {
            if (b == 0) {
                throw std::runtime_error("Division by zero");
            }
            return a / b;
        }
        throw std::runtime_error("Unknown operator: " + op);
    }
};

int main() {
    try {
        std::string expr;
        std::cout << "Enter postfix expression (space-separated): ";
        std::getline(std::cin, expr);
        
        PostfixCalculator calculator;
        double result = calculator.evaluate(expr);
        
        std::cout << "Result: " << result << std::endl;
    } catch (const std::runtime_error& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
